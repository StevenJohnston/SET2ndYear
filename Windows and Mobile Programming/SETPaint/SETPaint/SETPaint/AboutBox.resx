<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="logoPictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        DjoMXrjleuvyba/b1++svDMwFDJ0dzhyeOQu++7kvaR7L+9n3J9/sOkh+mHhI6lH5Y+VHtf9qPdj64jl
        yJlR19G+J0FPHoyxxp7/lP7Th/H8p+Sn5ROqE42TZpOnp9ynbj5b/Wz8eerz+emCn6V/rn6h++K7Xxx/
        6ZtZNTP+kv9y4dfiV/Kvjrxe9rp71n/28ZvkN/NzhW/l3x59x3jX+z7s/cR85gfsh4qPeh+7Pnl/eriQ
        vLDwG/eE8/vMO7xsAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAABDRpVFh0WE1M
        OmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVT
        ek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFk
        b2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAg
        Ij4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50
        YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMu
        YWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEu
        MS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1s
        bnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRw
        Oi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bXA6Q3JlYXRvclRvb2w9
        IkFkb2JlIFBob3Rvc2hvcCBDUzYgKFdpbmRvd3MpIiB4bXA6Q3JlYXRlRGF0ZT0iMjAxNS0xMC0wNlQx
        Nzo1NDowOC0wNDowMCIgeG1wOk1vZGlmeURhdGU9IjIwMTUtMTAtMDZUMTc6NTQ6MTctMDQ6MDAiIHht
        cDpNZXRhZGF0YURhdGU9IjIwMTUtMTAtMDZUMTc6NTQ6MTctMDQ6MDAiIGRjOmZvcm1hdD0iaW1hZ2Uv
        cG5nIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkNBNzM0
        OEE0NkM3NDExRTU4RjlBRTExQ0Y1OTQ5Q0U4IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkNBNzM0
        OEE1NkM3NDExRTU4RjlBRTExQ0Y1OTQ5Q0U4Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3Rh
        bmNlSUQ9InhtcC5paWQ6Q0E3MzQ4QTI2Qzc0MTFFNThGOUFFMTFDRjU5NDlDRTgiIHN0UmVmOmRvY3Vt
        ZW50SUQ9InhtcC5kaWQ6Q0E3MzQ4QTM2Qzc0MTFFNThGOUFFMTFDRjU5NDlDRTgiLz4gPC9yZGY6RGVz
        Y3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6qA0NyAAAH
        qElEQVRYR7VXe3BU5RU/uzHZbDavDdlNQp6EPDBZSJpCHpCQ92OzSUgCJaISHhEmQACpILSUhARJRCwE
        RUEL+EAtojMUFYwOtminM6WofeBUx2pL/+g4o1inamcQH7/+zr2L42geBOxv5rd77/fde875zne+c86V
        MRBCNllFHuL/GfL3dov8wR4kR3jtC+NPB5lHfp8IJeeluuXRtbVyoTNLMEkERWQ+6bEKfuUT/GSmIMUh
        b1wvsmmySLT56rVjR6zIv6dQUWeq4HSHABsEN0UKajjWQpaS83iPOwQvNAsCeD9B5GO+u5dMMKRcDZwh
        8tTcKEEWBaqyMpLG4JYsudQaLxeTee0h6W5ViMFiQXe6YDav55CZJMUsM6WND9xiOXaijau6U7Cbghsd
        pgGRIoc4F0O6yAyymuywiPTx/5c2kU9/yOe4DeADasACcnwIuE4W3lMjeK5OUJtAt9YL7is3hN1pPjEq
        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
        gg==
</value>
  </data>
</root>